package scalikejdbc.athena

import java.io.{InputStream, Reader}
import java.net.URL
import java.sql.{Array => SQLArray, _}
import java.time.ZoneId
import java.util.Calendar

import scala.collection.concurrent.TrieMap
import scala.collection.mutable

class AthenaPreparedStatement(con: AthenaConnection, underlying: Statement, sql: String) extends PreparedStatement {

  private[this] val parameterBuffer: mutable.Map[Int, AthenaParameter[_]] = TrieMap.empty

  private[this] def params: Seq[AthenaParameter[_]] = parameterBuffer.toIndexedSeq.sortBy(_._1).map(_._2)

  override def execute(): Boolean = {
    val query = StatementBuilder.build(sql, params)
    execute(query)
  }

  override def executeQuery(): ResultSet = {
    val query = StatementBuilder.build(sql, params)
    executeQuery(query)
  }

  override def executeUpdate(): Int = {
    val query = StatementBuilder.build(sql, params)
    executeUpdate(query)
  }

  override def getConnection: Connection =
    con

  override def setBoolean(parameterIndex: Int, x: Boolean): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Boolean(x)

  override def setByte(parameterIndex: Int, x: Byte): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Int(x)

  override def setDate(parameterIndex: Int, x: Date): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Timestamp(x.toInstant.atZone(ZoneId.systemDefault()))

  override def setDate(parameterIndex: Int, x: Date, cal: Calendar): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Timestamp(x.toInstant.atZone(cal.getTimeZone.toZoneId))

  override def setDouble(parameterIndex: Int, x: Double): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Double(x)

  override def setInt(parameterIndex: Int, x: Int): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Int(x)

  override def setLong(parameterIndex: Int, x: Long): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.BigInt(x)

  override def setNull(parameterIndex: Int, sqlType: Int): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Null

  override def setNull(parameterIndex: Int, sqlType: Int, typeName: String): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Null

  override def setObject(parameterIndex: Int, x: scala.Any, targetSqlType: Int): Unit =
    setObjectIfNull(parameterIndex, x)

  override def setObject(parameterIndex: Int, x: scala.Any): Unit =
    setObjectIfNull(parameterIndex, x)

  override def setObject(parameterIndex: Int, x: scala.Any, targetSqlType: Int, scaleOrLength: Int): Unit =
    setObjectIfNull(parameterIndex, x)

  private[this] def setObjectIfNull(parameterIndex: Int, x: scala.Any): Unit = x match {
    case null => parameterBuffer(parameterIndex) = AthenaParameter.Null
    case _ => notImplemented(s"setObject(${x.getClass})")
  }

  override def setShort(parameterIndex: Int, x: Short): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Int(x)

  override def setString(parameterIndex: Int, x: String): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.String(x)

  override def setTimestamp(parameterIndex: Int, x: Timestamp): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Timestamp(x.toInstant.atZone(ZoneId.systemDefault()))

  override def setTimestamp(parameterIndex: Int, x: Timestamp, cal: Calendar): Unit =
    parameterBuffer(parameterIndex) = AthenaParameter.Timestamp(x.toInstant.atZone(cal.getTimeZone.toZoneId))

  override def addBatch(sql: String): Unit =
    underlying.addBatch(sql)

  override def cancel(): Unit =
    underlying.cancel()

  override def clearBatch(): Unit =
    underlying.clearBatch()

  override def clearWarnings(): Unit =
    underlying.clearWarnings()

  override def close(): Unit =
    underlying.close()

  override def closeOnCompletion(): Unit =
    underlying.closeOnCompletion()

  override def execute(sql: String): Boolean =
    underlying.execute(sql)

  override def execute(sql: String, autoGeneratedKeys: Int): Boolean =
    underlying.execute(sql, autoGeneratedKeys)

  override def execute(sql: String, columnIndexes: Array[Int]): Boolean =
    underlying.execute(sql, columnIndexes)

  override def execute(sql: String, columnNames: Array[String]): Boolean =
    underlying.execute(sql, columnNames)

  override def executeBatch(): Array[Int] =
    underlying.executeBatch()

  override def executeQuery(sql: String): ResultSet =
    underlying.executeQuery(sql)

  override def executeUpdate(sql: String): Int =
    underlying.executeUpdate(sql)

  override def executeUpdate(sql: String, autoGeneratedKeys: Int): Int =
    underlying.executeUpdate(sql, autoGeneratedKeys)

  override def executeUpdate(sql: String, columnIndexes: Array[Int]): Int =
    underlying.executeUpdate(sql, columnIndexes)

  override def executeUpdate(sql: String, columnNames: Array[String]): Int =
    underlying.executeUpdate(sql, columnNames)

  override def getFetchDirection: Int =
    underlying.getFetchDirection

  override def getFetchSize: Int =
    underlying.getFetchSize

  override def getGeneratedKeys: ResultSet =
    underlying.getGeneratedKeys

  override def getMaxFieldSize: Int =
    underlying.getMaxFieldSize

  override def getMaxRows: Int =
    underlying.getMaxRows

  override def getMoreResults: Boolean =
    underlying.getMoreResults

  override def getMoreResults(current: Int): Boolean =
    underlying.getMoreResults(current)

  override def getQueryTimeout: Int =
    underlying.getQueryTimeout

  override def getResultSet: ResultSet =
    underlying.getResultSet

  override def getResultSetConcurrency: Int =
    underlying.getResultSetConcurrency

  override def getResultSetHoldability: Int =
    underlying.getResultSetHoldability

  override def getResultSetType: Int =
    underlying.getResultSetType

  override def getUpdateCount: Int =
    underlying.getUpdateCount

  override def getWarnings: SQLWarning =
    underlying.getWarnings

  override def isClosed: Boolean =
    underlying.isClosed

  override def isCloseOnCompletion: Boolean =
    underlying.isCloseOnCompletion

  override def isPoolable: Boolean =
    underlying.isPoolable

  override def isWrapperFor(iface: Class[_]): Boolean =
    underlying.isWrapperFor(iface)

  override def setCursorName(name: String): Unit =
    underlying.setCursorName(name)

  override def setEscapeProcessing(enable: Boolean): Unit =
    underlying.setEscapeProcessing(enable)

  override def setFetchDirection(direction: Int): Unit =
    underlying.setFetchDirection(direction)

  override def setFetchSize(rows: Int): Unit =
    underlying.setFetchSize(rows)

  override def setMaxFieldSize(max: Int): Unit =
    underlying.setMaxFieldSize(max)

  override def setMaxRows(max: Int): Unit =
    underlying.setMaxRows(max)

  override def setPoolable(poolable: Boolean): Unit =
    underlying.setPoolable(poolable)

  override def setQueryTimeout(seconds: Int): Unit =
    underlying.setQueryTimeout(seconds)

  override def unwrap[T](iface: Class[T]): T =
    underlying.unwrap(iface)

  override def addBatch(): Unit = notImplemented("addBatch")

  override def clearParameters(): Unit = notImplemented("clearParameters")

  override def getMetaData: ResultSetMetaData = notImplemented("getMetaData")

  override def getParameterMetaData: ParameterMetaData = notImplemented("getParameterMetaData")

  override def setArray(parameterIndex: Int, x: SQLArray): Unit = notImplemented("setArray")

  override def setAsciiStream(parameterIndex: Int, x: InputStream, length: Int): Unit = notImplemented("setAsciiStream")

  override def setAsciiStream(parameterIndex: Int, x: InputStream, length: Long): Unit = notImplemented("setAsciiStream")

  override def setAsciiStream(parameterIndex: Int, x: InputStream): Unit = notImplemented("setAsciiStream")

  override def setBigDecimal(parameterIndex: Int, x: java.math.BigDecimal): Unit = notImplemented("setBigDecimal")

  override def setBinaryStream(parameterIndex: Int, x: InputStream, length: Int): Unit = notImplemented("setBinaryStream")

  override def setBinaryStream(parameterIndex: Int, x: InputStream, length: Long): Unit = notImplemented("setBinaryStream")

  override def setBinaryStream(parameterIndex: Int, x: InputStream): Unit = notImplemented("setBinaryStream")

  override def setBlob(parameterIndex: Int, x: Blob): Unit = notImplemented("setBlob")

  override def setBlob(parameterIndex: Int, inputStream: InputStream, length: Long): Unit = notImplemented("setBlob")

  override def setBlob(parameterIndex: Int, inputStream: InputStream): Unit = notImplemented("setBlob")

  override def setBytes(parameterIndex: Int, x: Array[Byte]): Unit = notImplemented("setBytes")

  override def setCharacterStream(parameterIndex: Int, reader: Reader, length: Int): Unit = notImplemented("setCharacterStream")

  override def setCharacterStream(parameterIndex: Int, reader: Reader, length: Long): Unit = notImplemented("setCharacterStream")

  override def setCharacterStream(parameterIndex: Int, reader: Reader): Unit = notImplemented("setCharacterStream")

  override def setClob(parameterIndex: Int, x: Clob): Unit = notImplemented("setClob")

  override def setClob(parameterIndex: Int, reader: Reader, length: Long): Unit = notImplemented("setClob")

  override def setClob(parameterIndex: Int, reader: Reader): Unit = notImplemented("setClob")

  override def setFloat(parameterIndex: Int, x: Float): Unit = notImplemented("setFloat")

  override def setNCharacterStream(parameterIndex: Int, value: Reader, length: Long): Unit = notImplemented("setNCharacterStream")

  override def setNCharacterStream(parameterIndex: Int, value: Reader): Unit = notImplemented("setNCharacterStream")

  override def setNClob(parameterIndex: Int, value: NClob): Unit = notImplemented("setNClob")

  override def setNClob(parameterIndex: Int, reader: Reader, length: Long): Unit = notImplemented("setNClob")

  override def setNClob(parameterIndex: Int, reader: Reader): Unit = notImplemented("setNClob")

  override def setNString(parameterIndex: Int, value: String): Unit = notImplemented("setNString")

  override def setRef(parameterIndex: Int, x: Ref): Unit = notImplemented("setRef")

  override def setRowId(parameterIndex: Int, x: RowId): Unit = notImplemented("setRowId")

  override def setSQLXML(parameterIndex: Int, xmlObject: SQLXML): Unit = notImplemented("setSQLXML")

  override def setTime(parameterIndex: Int, x: Time): Unit = notImplemented("setTime")

  override def setTime(parameterIndex: Int, x: Time, cal: Calendar): Unit = notImplemented("setTime")

  override def setUnicodeStream(parameterIndex: Int, x: InputStream, length: Int): Unit = notImplemented("setUnicodeStream")

  override def setURL(parameterIndex: Int, x: URL): Unit = notImplemented("setURL")

  private[this] def notImplemented(method: String): Nothing = {
    throw new UnsupportedOperationException(s"method AthenaPreparedStatement.$method is not yet implemented")
  }
}
